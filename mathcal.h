/************************************************************************/
/*						       数学计算                                 */
/************************************************************************/
#ifndef __AFXEXT_H__
#include <afxext.h>
#endif
#include <math.h>


/************************************************************************/
/*							1.	FFT计算								    */
/************************************************************************/

void FFT(float xin[], int N);

// void FastFourierTransform (double xin[],int N)

/************************************************************************/
/*							2.  积分计算                                */
/************************************************************************/

void Inte_cal(float xin[], int N, float f);

/************************************************************************/
/*							3.  A计权滤波及声级计算                     */
/************************************************************************/

float A_weight(float xin[],int N, int fs);

/************************************************************************/
/*							4.  线性声级计算                            */
/************************************************************************/

float audioline(float xin[], int N, int fs);

/************************************************************************/
/*							5.  倍频程分析                              */
/************************************************************************/
void octave_anal(float xin[],float yout[9], int N, int fs);

/************************************************************************/
/*							6.  1/3倍频程分析                           */
/************************************************************************/
void one_third_octave(float xin[], int N, int fs);

/************************************************************************/
/*							7.  统计值计算                              */
/************************************************************************/
void statisticcal(float *xin, long counts,/*平均值*/ double ave, /*平均差*/float adev,
				  /*标准差*/float sedv,/*方差*/float var,/*最大值*/float dmax,
				  /*最小值*/float dmin,/*最大有效值*/float absmax);

/************************************************************************/
/*							8.  数组拷贝                                */
/************************************************************************/
void array_cpy(float* array_target/*目标数组*/,float* array_sourece/*源数组*/,int data_num/*数量*/);